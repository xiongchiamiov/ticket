#!/bin/sh

# This should eventually be rewritten to have less wanky option parsing,
# possibly in a more sophisticated scripting language.

case $1 in
	'setup')
		cd &&
		git svn clone file:///var/ifixit/CodeRepos/ -s &&
		mv Code Code.bak &&
		mv CodeRepos Code
		;;
	'list')
		if [ "$2" = 'active' ] || [ "$2" = '' ]; then
			echo 'Active tickets:'
			screen -ls | grep 'tached' | sed 's/^.*\./   /' | grep -E '^   #[0-9]+'
			echo
		fi
		if [ "$2" = 'open' ] || [ "$2" = '' ]; then
			echo 'Open tickets:'
			echo 'Not yet implemented.'
			echo
		fi
		if [ "$2" = 'blocked' ] || [ "$2" = '' ]; then
			echo 'Blocked tickets:'
			echo 'Not yet implemented.'
			echo
		fi
		;;
	'start')
		if [ "$2" = '' ]; then
			$0 help start
			exit 1
		fi

		# Unfortunately, because of the way git works, changes are separate from
		# branches, which is normally good, but makes it hard for us to keep
		# changes in one branch separate from those in another.  So, we stash
		# things away and pop them off again when we come back.  The downside of
		# this is that you shouldn't use stash for anything else, since your
		# stashed changes could get popped off unexpectedly.  You also shouldn't
		# work on two things at the same time, because the working directory on
		# the first will be changed when you start the second.
		# An alternative approach would be to litter a directory with copies of
		# trunk and change around symlinks.
		# I'd think that `cd`ing would work, but it seems that screen won't start
		# with that directory.  So, we'll just tell people they need to be in
		# `~/Code`.
		#cd ~/Code &&
		if [ ! `pwd` = ~/Code ]; then
			echo 'You need to run this in ~/Code !'
			exit 1
		fi

		git add .  # Make sure we stash new files
		git stash
		git checkout master # Make sure we start new tickets from master
		git svn rebase # Update from svn
		git checkout -B "#$2"
		# Stashes aren't tied directly to branches, but `git stash list` displays
		# the branch they were created on.  So, get the most recent one of those.
		stash=$(git stash list | grep "WIP on #$2:" | head -1 | sed 's/}:.*/}/')
		[ $stash ] && git stash pop $stash && git reset HEAD .
		screen -DRR "#$2"
		;;
	'help')
		echo 'Help not yet implemented.'
		;;
	*)
		$0 help
		exit 1
		;;
esac

